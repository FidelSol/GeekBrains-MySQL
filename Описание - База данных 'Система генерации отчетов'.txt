База данных проекта "Система генерациии отчетов".

Цель проекта: генерация документации и отчетов различных отделов группы компаний с помощью API Rest Framework и pandas.

Алгоритм: 

1. Регистрация пользователя админом сайта.
2. Пользователь заходит в личный кабинет сайта, имея доступ только к определенному количеству типов отчета.
3. Тип отчета - это создаваемый администратором сайта 'шаблон' с нужным количеством и названиями параметров 
(текстовые, веременные, файловые). Пользователь видит доступные ему типы отчетов и выбирает, по какому ему нужно 
создать запрос. В типе отчета админ определяет адрес, по которому будет отправлен запрос (другой сервер со скриптами генерации).
Пользователь заполняет поля параметров, которые заданы типом отчета и отправляет запрос.
4. На сайт со второго сервера приходит результат в форме файла. Получив результат, пользователь получает уведомление и количество 
непросмотренных результатов.

Таблицы:

1. Тип отчета Typereport - создаваемый администратором сайта 'шаблон' с нужным количеством и названиями параметров 
(текстовые, веременные, файловые). 
Основные присущие для всех типов отчета поля: название, отдел и URL.

2. Текстовый параметр Типа отчета Targetstring - текстовый параметр, который связан с типом отчета способом "Один тип отчета - много 
текстовых параметров".
Основные присущие для всех видов параметров поля: КЛЮЧ - это поле для API, наш внутренний идентификатор для генератора документациии,
название параметра, тип отчета.
Поле Содержание параметра - для разных видов параметра разное, для текствого, как Вы догадались, текстовое поле, для файла - файловое, 
для временного - datetime.

!!!создать тип отчета может только администратор, при создании параметров типа отчета содержание параметров не заполняется, определяются 
лишь ключи и названия параметров!!!

3. Файловый параметр Типа отчета Targetfile - файловый параметр, который связан с типом отчета способом "Один тип отчета - много 
файловых параметров". Разница в полях с текстовым и временным параметром - лишь в поле Содержание - тут использовалось Django поле 
FileFieldв модели.

4. Временный параметр Типа отчета Targettime - времеенный параметр, который связан с типом отчета способом "Один тип отчета - много 
временных параметров". Разница в полях с текстовым и файловым параметром - лишь в поле Содержание - тут использовалось Django поле 
DateTimeField в модели. 

5. Должность Role - должность пользователя в группе компаний. Основное поле - непосредственно Роль.

6. Пользователь CustomUser - пользователь, который связан с Ролью способом "Одна роль - много 
пользователей" и с Типами отчетов способом "Много пользователей - много типов отчетов". Поля: ФИО, телефон, должность, типы отчетов. 
Поле many-to-many Levels - типы отчетов, характеризует доступ по типам отчета данного пользователя. В приложении каждый пользователь 
видит лишь доступные им типы отчетов, определнные администратором, а также запросы, которые сделаны им или другими пользователями 
согласно этим типам отчета.

7. Уровень доступа Perm - уровень доступа, который администратор определяет для каждого пользователя при его регистрации или 
редактировании. Модель построена на основе выборов уровней доступа:
ADMIN = 0
QUERY = 1
QUERY_VIEW = 2


PERMISSION_CHOICES = [
    (ADMIN, 'администратор, полный доступ'),
    (QUERY, 'может делать запрос и смотреть результат'),
    (QUERY_VIEW, 'может только смотреть результат запросов')
]

Уровень доступа связан с Пользователем способом "Один уровень доступа - много пользователей". Поля: пользователь, права (choices).

8. Запрос Query - запрос, который создается пользователем при выборе типа отчета. Параметры запроса рендерятся согласно параметрам 
типа отчета, т.е. своему 'шаблону'. Все, что нужно от пользователя, это заполнить содержания параметров и нажать кнопку "Отправить".
Запрос связан с Пользователем способом "Один пользователь - много запросов" и Типом отчета способом "Один тип отчета - много пользователей". 
Поля: название запроса, тип отчета, дата создания, пользователь, статус.

Статус меняется в зависимости от следующих состояний:
CREATED = 1
POSTED = 2
RESULT = 3
ERROR = 4

STATUS_CHOICES = [
    (CREATED, 'Запрос создан'),
    (POSTED, 'Запрос отправлен, ожидайте результат'),
    (RESULT, 'Результат получен'),
    (ERROR, 'Ошибка')
]

9. Текстовый параметр запроса Textparameter - абсолютно идентично Текстовому параметру Типа отчета - разница лишь в связе "Один запрос - 
много текстовых параметров запроса", то есть дополнительное поле query - запрос.

10. Файловый параметр запроса Fileparameter - абсолютно идентично Файловому параметру Типа отчета - разница лишь в связе "Один запрос - 
много файловых параметров запроса", то есть дополнительное поле query - запрос.

11. Временный параметр запроса Timeparameter - абсолютно идентично временному параметру Типа отчета - разница лишь в связе "Один запрос - 
много временных параметров запроса", то есть дополнительное поле query - запрос.

12. Результат Result - результат запроса, который приходит со второго сервера на наш сайт, адресованный определенному пользователю. С помощью
websockets происходит уведомление только автора запроса и пользователя, который допущен к типам отчета, по которому сделан запрос.
Результат связан с Запросом способом "Один запрос - много результатов", потому что могут быть несколько файлов на один запрос.
Поля: запрос, файл, название файла, сообщение, время получения.

13. Счетчик просмотренных результатов ResultCounter - как только пользователь получает результат, он не только видит всплывающее уведомление, 
но и счетчик непросмотренных результатов - в форме флажков с числами напротив вкладок Список запросов и Файлового менеджера. Плюс 
соответствующие флажки появляются интерактивно внутри Списка запросов и Файлового менеджера. При нажатии на флажок или при скачивании файла,
счетчик уменьшается на единицу. Счетчик связан с Пользователем способом "Один пользователь - много счетчиков". Один счетчик - одна единица
непросмотренного результата. Поля: название просмотренного результата, пользователь.


